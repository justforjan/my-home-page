name: Build MyWebsite Frontend

on:
  push:
    branches: [ "main" ]

env:
  DOCKER_IMAGE: ${{ github.repository }}
  GITHUB_REGISTRY: ghcr.io

jobs:

  build-frontend:
    name: Build and Publish Frontend Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the Repo
        uses: actions/checkout@v4

      - name: Log into Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_ACCESS_TOKEN }}


      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GITHUB_REGISTRY }}/justforjan/my-home-page_frontend
          tags: latest

      - name: Build and Push Frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: DEPLOYMENT_TYPE=prod
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


  build-backend:
    name: Build and Publish Backend Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the Repo
        uses: actions/checkout@v4

      - name: Log into Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_ACCESS_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GITHUB_REGISTRY }}/justforjan/my-home-page_backend
          tags: latest

      - name: Build and Push Backend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


  deploy:
    name: Deploy Website
    runs-on: ubuntu-latest
    needs:
      - build-frontend
      - build-backend

    steps:

      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Create Target Directory
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            mkdir -p ${{ secrets.WORK_DIR }}
            exit
          EOF
          

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Copy docker-compose.yml to VPS
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.WORK_DIR }}

      - name: Deploy Application
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd ${{ secrets.WORK_DIR }}
            mkdir -p backend
            cd backend
            file=".env"
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> $file
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> $file
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> $file
            echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> $file
            echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> $file
            cd ..
            docker compose down
            docker compose pull
            docker compose up -d --remove-orphans
            exit
          EOF

      - name: Cleanup SSH Key
        run: rm -rf ~/.ssh
      
      
          
          
          
          
